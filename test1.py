import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.feature_extraction.text import CountVectorizer  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("—Ç–µ–∫—Å—Ç—ã.csv")  # —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: message, label
X = df["message"]
y = df["label"]  # 1 ‚Äî –°–ü–ê–ú, 0 ‚Äî –ù–û–†–ú

# 2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
pipe = make_pipeline(
    CountVectorizer(),  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ TfidfVectorizer()
    LogisticRegression(max_iter=1000)
)

pipe.fit(X_train, y_train)

# 4. –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
y_pred = pipe.predict(X_test)
print(f"üìä Accuracy: {accuracy_score(y_test, y_pred):.2f}")

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
new_messages = [
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å–≤–æ–π CVV –∫–æ–¥",
    "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 12:00",
    "–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
    "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ü–∏—é"
]

print("\nüì¨ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
for msg in new_messages:
    pred = pipe.predict([msg])[0]
    label = "–°–ü–ê–ú" if pred == 1 else "–ù–û–†–ú"
    print(f"'{msg}' ‚Üí {label}")
